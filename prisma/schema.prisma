generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  subscribed        Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                    @id @default(cuid())
  created                  DateTime                  @default(now())
  updated                  DateTime                  @default(now()) @updatedAt
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  account                  Account[]
  sessions                 Session[]
  tweetCampaignPermissions TweetCampaignPermission[]
  targetListPermissions    TargetListPermission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Define the TweetCampaign model
model TweetCampaign {
  id                       Int                       @id @default(autoincrement())
  created                  DateTime                  @default(now())
  updated                  DateTime                  @default(now()) @updatedAt
  title                    String
  slug                     String                    @unique @default(uuid())
  description              String
  targetList               TargetList                @relation(fields: [targetListId], references: [id])
  targetListId             Int
  published                Boolean                   @default(true)
  tweets                   Tweet[]
  tweetCampaignPermissions TweetCampaignPermission[]
}

model TweetCampaignPermission {
  id         Int           @id @default(autoincrement())
  created    DateTime      @default(now())
  updated    DateTime      @default(now()) @updatedAt
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  campaign   TweetCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId Int
  // Define the type of permission (e.g., 'read', 'write', 'delete', etc.)
  type       String
}

// Define the Tweet model
model Tweet {
  id         Int           @id @default(autoincrement())
  created    DateTime      @default(now())
  updated    DateTime      @default(now()) @updatedAt
  text       String
  campaign   TweetCampaign @relation(fields: [campaignId], references: [id])
  campaignId Int
}

// Define the TargetList model
model TargetList {
  id             Int                    @id @default(autoincrement())
  created        DateTime               @default(now())
  updated        DateTime               @default(now()) @updatedAt
  name           String
  targets        Target[]
  tweetCampaigns TweetCampaign[]
  isPublic       Boolean
  permissions    TargetListPermission[]
}

model TargetListPermission {
  id           Int        @id @default(autoincrement())
  created      DateTime   @default(now())
  updated      DateTime   @default(now()) @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  targetList   TargetList @relation(fields: [targetListId], references: [id], onDelete: Cascade)
  targetListId Int
  // Define the type of permission (e.g., 'read', 'write', 'delete', etc.)
  type         String
}

// Define the Target model
model Target {
  id            Int        @id @default(autoincrement())
  created       DateTime   @default(now())
  updated       DateTime   @default(now()) @updatedAt
  name          String
  twitterHandle String
  targetList    TargetList @relation(fields: [targetListId], references: [id])
  targetListId  Int
}
