generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  subscribed        Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String                       @id @default(cuid())
  created                    DateTime                     @default(now())
  updated                    DateTime                     @default(now()) @updatedAt
  name                       String?
  email                      String?                      @unique
  emailVerified              DateTime?
  image                      String?
  account                    Account[]
  sessions                   Session[]
  tweetCampaignPermissions   TweetCampaignPermission[]
  targetListPermissions      TargetListPermission[]
  userPetitionPermissions    UserPetitionPermissions[]
  PetitionCampaignPermission PetitionCampaignPermission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Define the TweetCampaign model
model TweetCampaign {
  id                       Int                       @id @default(autoincrement())
  created                  DateTime                  @default(now())
  updated                  DateTime                  @default(now()) @updatedAt
  title                    String
  slug                     String                    @unique @default(uuid())
  description              String
  targetList               TargetList                @relation(fields: [targetListId], references: [id])
  targetListId             Int
  published                Boolean                   @default(true)
  tweets                   Tweet[]
  tweetCampaignPermissions TweetCampaignPermission[]
}

model TweetCampaignPermission {
  id         Int           @id @default(autoincrement())
  created    DateTime      @default(now())
  updated    DateTime      @default(now()) @updatedAt
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  campaign   TweetCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId Int
  // Define the type of permission (e.g., 'read', 'write', 'delete', etc.)
  type       String
}

// Define the Tweet model
model Tweet {
  id         Int           @id @default(autoincrement())
  created    DateTime      @default(now())
  updated    DateTime      @default(now()) @updatedAt
  text       String
  campaign   TweetCampaign @relation(fields: [campaignId], references: [id])
  campaignId Int
}

// Define the TargetList model
model TargetList {
  id             Int                    @id @default(autoincrement())
  created        DateTime               @default(now())
  updated        DateTime               @default(now()) @updatedAt
  name           String
  targets        Target[]
  tweetCampaigns TweetCampaign[]
  isPublic       Boolean
  permissions    TargetListPermission[]
}

model TargetListPermission {
  id           Int        @id @default(autoincrement())
  created      DateTime   @default(now())
  updated      DateTime   @default(now()) @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  targetList   TargetList @relation(fields: [targetListId], references: [id], onDelete: Cascade)
  targetListId Int
  // Define the type of permission (e.g., 'read', 'write', 'delete', etc.)
  type         String
}

// Define the Target model
model Target {
  id            Int        @id @default(autoincrement())
  created       DateTime   @default(now())
  updated       DateTime   @default(now()) @updatedAt
  name          String
  twitterHandle String
  targetList    TargetList @relation(fields: [targetListId], references: [id])
  targetListId  Int
}

model ActionNetworkCredential {
  id                 Int                @id @default(autoincrement())
  name               String
  apiKey             String
  petitionCampaign   PetitionCampaign[]
  petitionCampaignId Int
}

model PetitionCampaign {
  id                        Int                          @id @default(autoincrement())
  title                     String
  description               String?
  actionNetworkCredential   ActionNetworkCredential?     @relation(fields: [actionNetworkCredentialId], references: [id])
  actionNetworkCredentialId Int?
  petitionEndpointURL       String?
  tagPrefix                 String
  actionNetworkTagId        String?
  petitions                 Petition[]
  sharingInformation        SharingInformation?          @relation(fields: [sharingInformationId], references: [id])
  sharingInformationId      Int?                         @unique
  themes                    Theme[]                      @relation("PetitionCampaignThemes")
  permissions               PetitionCampaignPermission[]
  status                    String                       @default("draft")
  defaultPetitionImage      File?                        @relation(fields: [defaultPetitionImageId], references: [id])
  defaultPetitionImageId    Int?
}

model Petition {
  id                   Int                       @id @default(autoincrement())
  locationTag          String?
  title                String
  content              String
  sharingInformation   SharingInformation        @relation(fields: [sharingInformationId], references: [id])
  sharingInformationId Int                       @unique
  permissions          UserPetitionPermissions[]
  petitionCampaign     PetitionCampaign?         @relation(fields: [petitionCampaignId], references: [id])
  petitionCampaignId   Int?
  petitionThemes       Theme[]                   @relation("PetitionThemes")
  image                File?                     @relation(fields: [imageId], references: [id])
  imageId              Int?
  creatorEmail         String?
}

model UserPetitionPermissions {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  type       String
  petition   Petition @relation(fields: [petitionId], references: [id])
  petitionId Int
}

model SharingInformation {
  id                 Int               @id @default(autoincrement())
  petition           Petition?
  petitionId         Int?
  petitionCampaign   PetitionCampaign?
  petitionCampaignId Int?
  whatsappShareText  String
  shareImage         File?             @relation(fields: [shareImageId], references: [id])
  shareImageId       Int?
  shareTitle         String
  tweet              String
  description        String
}

model Theme {
  id          Int                @id @default(autoincrement())
  title       String
  description String?
  icon        String
  petitions   Petition[]         @relation("PetitionThemes")
  campaign    PetitionCampaign[] @relation("PetitionCampaignThemes")
}

model PetitionCampaignPermission {
  id         Int              @id @default(autoincrement())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  campaign   PetitionCampaign @relation(fields: [campaignId], references: [id])
  campaignId Int
  type       String
}

model File {
  id                 Int                  @id @default(autoincrement())
  name               String?
  url                String
  thumbnailUrl       String?
  petitions          Petition[]
  petitionCampaign   PetitionCampaign[]
  sharingInformation SharingInformation[]
}
